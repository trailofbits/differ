name: memcached
original: /usr/bin/memcached
debloaters:
  original: /usr/bin/memcached

templates:
  # set and get command (store and retrieve value)
  - concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        client.set('x', '10')
        assert client.get('x') == '10'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # set with expiration
  - concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        import time
        from memcache import Client

        client = Client('127.0.0.1')
        client.set('x', '10', time=2)
        assert client.get('x') == '10', 'value was not set'

        time.sleep(3.0)
        assert client.get('x') is None, 'value did not expire'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp
