name: memcached
original: /usr/bin/memcached
debloaters:
  original: /usr/bin/memcached

templates:
  # set and get command (store and retrieve value)
  - id: set_get
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.set('x', '10')
        assert client.get('x') == '10'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # set with expiration
  - id: set-expiration_get-expired
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        import time
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.set('x', '10', time=2)
        assert client.get('x') == '10', 'value was not set'

        time.sleep(3.0)
        assert client.get('x') is None, 'value did not expire'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # add
  - id: add
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.add('x', '10')
        assert client.get('x') == '10', 'value was not set'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: add_exists
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        client.set('x', '10')
        assert client.add('x', '20') == 0
        assert client.get('x') == '10', 'value was updated'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # replace
  - id: replace
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.add('x', '10')
        assert client.replace('x', '20')
        assert client.get('x') == '20', 'value was not replaced'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: replace_exists
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.replace('x', '10') == 0
        assert client.get('x') is None, 'value was added'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # append
  - id: append
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.add('x', '10')
        assert client.append('x', '00')
        assert client.get('x') == '1000', 'value was not updated'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: append-error
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.append('x', '00') == 0
        assert client.get('x') is None, 'value was set'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # prepend
  - id: prepend
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.add('x', '10')
        assert client.prepend('x', '00')
        assert client.get('x') == '0010', 'value was not updated'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: prepend-error
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.prepend('x', '00') == 0
        assert client.get('x') is None, 'value was set'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # delete
  - id: delete
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.add('x', '10')
        assert client.delete('x')
        assert client.get('x') is None, 'value was not deleted'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: delete-error
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.delete('x')
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # incr/decr
  - id: incr
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.set('x', '10')
        assert client.incr('x')
        assert client.get('x') == '11'
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: incr-error
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.incr('x') is None
        assert client.get('x') is None
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  # decr
  - id: decr
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.set('x', '10')
        assert client.decr('x')
        assert client.get('x') == '9 '
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

  - id: decr-error
    concurrent:
      delay: 0.5
      mode: client
      retries: 3
      run: |
        python <<EOF
        from memcache import Client

        client = Client('127.0.0.1')
        assert client.decr('x') is None
        assert client.get('x') is None
        EOF

    pcap:
      filename: capture.pcap
      interface: lo

    comparators:
      - stdout
      - stderr
      - exit_code
      - id: concurrent_script
        exit_code:
          expect: 0
      - id: pcap
        filename: capture.pcap
        address: 127.0.0.1
        port: 11211
        protocol: tcp

