# Project name
name: my_app

# Path to the original binary. Relative paths are resolved against the directory containing the
# project YAML file.
original: /path/to/original/binary

# List of debloaters being evaluated. Each each is the debloater name and the value is the path to
# the debloated binary. Relative paths are resolved against the directory containing the project
# YAML file.
debloaters:
  my_debloater: /path/to/debloated/binary


# List of templates that define variables, comparators, command line arguments, etc.
templates:

  # command line arguments (default: '')
  - arguments: '--name {{full_name}}'

    # Timeout constraints
    timeout:
      # Maximum number of seconds a binary is allowed to execute before being terminated
      # (default: 60)
      seconds: 60

      # The timeout is expected or not. An unexpected timeout (false value) triggers a crash
      # report (default: false).
      expected: false

    # Input files
    input_files:
      # Path to the file. This can be absolute or relative to the trace directory.
      - source: /path/to/input_file

        # The destination path or filename for each trace. This can be absolute or relative to the
        # trace directory. By default, if not specified, the file is copied to the trace directory
        # with the same basename (e.g.- "/path/to/file" -> "/trace_dir/file"). This is optional.
        #
        # destination: generated_input_file

        # Set specified permission on the file after it is copied or generated for each trace. By
        # default, if not specified, the source file's permissions are copied. The value must be
        # the octal permission value that is compatible with "chmod" (e.g.- "755"). This is
        # optional.
        #
        # permission: "755"

        # The file is either static or not. Static files are copied to the destination as-is
        # without modification. Non-static files are generated using Jinja2 and the trace's
        # variable values (default: false).
        #
        # static: false

    # Standard input content
    stdin:
      # Standard input can either be a string or the path to a file. Paths can be absolute or
      # relative to the trace directory and can reference an input_file.
      #
      # You can only use one: value or path.
      #
      # Standard input value (supports variable expansion)
      # value: "some stdin content: {{address}}"
      #
      # Standard input file path
      # path: /path/to/stdin

    # Expect that the trace will succeed (true) or fail (false). When a trace is expected to fail,
    # then any crashes or comparison failures are treated as successful (default: true).
    # expect_success: true

    # A set of variables that will be generated for each trace.
    variables:
      # The key is the variable name
      full_name:
        # The type of the variable.
        type: str

        # After 'type', additional configuration is passed to the variable implementation. In
        # general, most variables accept both a list of values to explicitly use and configuration
        # for how to generate additional values.
        values:
          - Rob Smith
          - Glenn Doe

      address:
        type: int
        range:
          minimum: 0
          maximum: 100
          count: 5

    # The list of comparators that will verify that the debloated binary's behavior matches the
    # originals. In most situations, several comparators will be used:
    #
    #  - exit_code - validate that the process exit code matches
    #  - stdout - validate that the process standard output content matches
    #  - stderr - validate that the process standard error content matches
    comparators:
      # Comparators without any configuration can be specified by their id
      - exit_code

      # Comparators with configuration must have an "id" key
      - id: stdout
        # Additional configuration for the comparator follows the id
        pattern: '^hello, [A-z][a-z0-9]+!\n$'

      - stderr





